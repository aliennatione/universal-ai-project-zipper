import { AIPromptConfig, Preset, ExamplePrompt, Provider, AppSettings } from \'../types\';
import { translations } from \'./i18n\';

/**
 * @file Contiene tutte le configurazioni di prompt predefinite, i preset e i template per l\'applicazione.
 * @module prompts
 */

/**
 * @const {ExamplePrompt[]} examplePrompts
 * Un array di prompt di esempio bilingue (italiano e inglese) per aiutare gli utenti a iniziare.
 */
export const examplePrompts: ExamplePrompt[] = [
    {
        it: {
            title: "Prompt 1: Sintesi Completa",
            content: `Analizza e condensa in una singola risposta esaustiva tutto ciò che è stato discusso in questa chat. L\'obiettivo finale è ottenere un risultato **operativo**: un software funzionante, un sistema documentato o un prodotto concreto, pronto per l\'uso o per lo sviluppo. La risposta dovrà:\\n\\n1. **Integrare e strutturare tutte le informazioni precedentemente trattate nella conversazione**, trasformandole in un unico documento o progetto coerente.\\n\\n2. Restituire un output che possa concretizzarsi in uno dei seguenti:\\n   * Un\'applicazione o script pronto per l\'esecuzione\\n   * Un progetto software organizzato in cartelle e file\\n   * Una guida tecnica o documentazione strutturata\\n   * Una combinazione di codice, documentazione e istruzioni operative\\n\\n3. Includere:\\n   * Una panoramica introduttiva del progetto\\n   * Gli obiettivi chiari e le funzionalità principali\\n   * Tutti i componenti tecnici necessari (codice, configurazioni, strutture dati, ecc.)\\n   * Istruzioni passo-passo per l\'installazione, l\'utilizzo e l’estensione futura\\n   * Eventuali esempi, test o dati di esempio\\n   * Una sezione di note o suggerimenti per sviluppi futuri\\n\\n4. Formattare il tutto come se fosse pronto per essere condiviso, pubblicato o eseguito immediatamente (ad esempio, come repository GitHub o documento PDF/Markdown completo).\\n\\nEvita ripetizioni, unifica lo stile e struttura la risposta in modo chiaro e professionale, con titoli, sottosezioni e codice ben indentato.`
        },
        en: {
            title: "Prompt 1: Comprehensive Synthesis",
            content: `Analyze and condense everything discussed in this chat into a single, comprehensive response. The ultimate goal is to obtain an **operational** result: a functioning piece of software, a documented system, or a concrete product, ready for use or development. The response must:\\n\\n1. **Integrate and structure all information previously discussed in the conversation**, transforming it into a single, coherent document or project.\\n\\n2. Return an output that can materialize as one of the following:\\n   * An application or script ready for execution\\n   * A software project organized into folders and files\\n   * A technical guide or structured documentation\\n   * A combination of code, documentation, and operational instructions\\n\\n3. Include:\\n   * An introductory overview of the project\\n   * Clear objectives and main functionalities\\n   * All necessary technical components (code, configurations, data structures, etc.)\\n   * Step-by-step instructions for installation, use, and future extension\\n   * Any examples, tests, or sample data\\n   * A notes or suggestions section for future developments\\n\\n4. Format everything as if it were ready to be shared, published, or executed immediately (e.g., as a GitHub repository or a complete PDF/Markdown document).\\n\\nAvoid repetition, unify the style, and structure the response clearly and professionally, with titles, subsections, and well-indented code.`
        },
    },
    {
        it: {
            title: "Prompt 2: Generazione Stile Repo",
            content: `Genera un progetto completo e coeso basato sull\'intero contenuto di questa chat. Il risultato deve essere un unico output esaustivo che includa tutti i componenti necessari come se fosse un repository Git pronto per la pubblicazione. Il progetto deve contenere:\\n\\n1. Una descrizione chiara e dettagliata nel file \\\`README.md\\\`, comprensiva di:\\n   * Obiettivi del progetto\\n   * Contesto e finalità\\n   * Istruzioni per l’installazione, l’uso e l’eventuale distribuzione\\n   * Tecnologie utilizzate\\n\\n2. La struttura completa delle cartelle e dei file del progetto, con un layout coerente e facilmente navigabile.\\n\\n3. Il codice sorgente completo e funzionante, incluso:\\n   * Tutti gli script o moduli principali\\n   * Funzioni ben commentate e documentate\\n   * Eventuali file di configurazione (\\\`.env.example\\\`, \\\`config.json\\\`, \\\`settings.py\\\`, ecc.)\\n\\n4. Eventuali risorse accessorie:\\n   * Esempi d’uso (\\\`examples/\\\`)\\n   * Script di test o automazione (\\\`tests/\\\`, \\\`scripts/\\\`)\\n   * Dipendenze elencate (\\\`requirements.txt\\\`, \\\`package.json\\\`, ecc.)\\n\\n5. Un file \\\`.gitignore\\\` coerente con il progetto\\n\\n6. Licenza del progetto (\\\`LICENSE\\\`), preferibilmente una licenza open-source\\n\\nL’output deve essere completo, dettagliato e pronto per essere copiato/incollato come base per un vero repository su GitHub. Assicurati di non tralasciare nulla e di integrare tutte le informazioni discusse in chat in modo organico.`
        },
        en: {
            title: "Prompt 2: Git Repo-Style Generation",
            content: `Generate a complete and cohesive project based on the entire content of this chat. The result must be a single, exhaustive output that includes all the necessary components as if it were a Git repository ready for publication. The project must contain:\\n\\n1. A clear and detailed description in the \\\`README.md\\\` file, including:\\n   * Project objectives\\n   * Context and purpose\\n   * Instructions for installation, use, and potential distribution\\n   * Technologies used\\n\\n2. The complete folder and file structure of the project, with a coherent and easily navigable layout.\\n\\n3. The complete and functioning source code, including:\\n   * All main scripts or modules\\n   * Well-commented and documented functions\\n   * Any configuration files (\\\`.env.example\\\`, \\\`config.json\\\`, \\\`settings.py\\\`, etc.)\\n\\n4. Any accessory resources:\\n   * Usage examples (\\\`examples/\\\`)\\n   * Test or automation scripts (\\\`tests/\\\`, \\\`scripts/\\\`)\\n   * Listed dependencies (\\\`requirements.txt\\\`, \\\`package.json\\\`, etc.)\\n\\n5. A \\\`.gitignore\\\` file consistent with the project\\n\\n6. Project license (\\\`LICENSE\\\`), preferably an open-source license\\n\\nThe output must be complete, detailed, and ready to be copy/pasted as the basis for a real GitHub repository. Ensure nothing is left out and that all information discussed in the chat is integrated organically.`
        }
    },
    {
        it: {
            title: "Prompt 3: Repo Documentazione/Wiki",
            content: `Genera, dal contenuto della nostra discussione un repository di documentazione strutturato come una wiki di GitHub. L\'obiettivo è creare una base di conoscenza completa per un progetto basato su quanto discusso in questa intera chat. L\'output deve essere un insieme di file Markdown pronti per essere usati come documentazione.\\n\\nIl repository deve includere:\\n1.  **Pagina Principale (\\\`Home.md\\\`):** Una pagina di benvenuto che introduce il progetto, la sua visione e come navigare la wiki.\\n2.  **Guide Introduttive (\\\`getting-started/\\\`):**\\n    *   \\\`Installation.md\\\`: Istruzioni dettagliate per l\'installazione.\\n    *   \\\`Quick-Start.md\\\`: Un tutorial rapido per i nuovi utenti.\\n3.  **Guide Approfondite (\\\`deep-dive/\\\`):**\\n    *   \\\`Architecture.md\\\`: Una panoramica dell\'architettura del software.\\n    *   \\\`API-Reference.md\\\`: Documentazione completa delle API con esempi di codice.\\n4.  **Guide How-To (\\\`how-to/\\\`):**\\n    *   \\\`Deploy-to-Production.md\\\`: Guida pratica per il deployment.\\n    *   \\\`Contribute.md\\\`: Linee guida per chi vuole contribuire al progetto.\\n5.  **Script di supporto (\\\`scripts/\\\`):**\\n    *   Includi uno o due script di esempio (es. \\\`check_health.sh\\\` o \\\`build.py\\\`) menzionati e spiegati nelle guide.\\n\\nOgni file Markdown deve essere ben formattato, con link interni per navigare tra le pagine della wiki (es. \\\`[Vedi la guida all\\'installazione](./getting-started/Installation.md)\\\`). La struttura delle cartelle e dei file deve essere chiara e rispecchiare quella di una vera documentazione.`
        },
        en: {
            title: "Prompt 3: Documentation Repo/Wiki",
            content: `Generate, from the content of our discussion, a documentation repository structured like a GitHub wiki. The goal is to create a complete knowledge base for a project based on what was discussed in this entire chat. The output must be a set of Markdown files ready to be used as documentation.\\n\\nThe repository must include:\\n1.  **Main Page (\\\`Home.md\\\`):** A welcome page that introduces the project, its vision, and how to navigate the wiki.\\n2.  **Getting Started Guides (\\\`getting-started/\\\`):**\\n    *   \\\`Installation.md\\\`: Detailed installation instructions.\\n    *   \\\`Quick-Start.md\\\`: A quick tutorial for new users.\\n3.  **In-Depth Guides (\\\`deep-dive/\\\`):**\\n    *   \\\`Architecture.md\\\`: An overview of the software\'s architecture.\\n    *   \\\`API-Reference.md\\\`: Complete API documentation with code examples.\\n4.  **How-To Guides (\\\`how-to/\\\`):**\\n    *   \\\`Deploy-to-Production.md\\\`: A practical guide for deployment.\\n    *   \\\`Contribute.md\\\`: Guidelines for those who want to contribute to the project.\\n5.  **Support Scripts (\\\`scripts/\\\`):**\\n    *   Include one or two example scripts (e.g., \\\`check_health.sh\\\` or \\\`build.py\\\`) mentioned and explained in the guides.\\n\\nEach Markdown file must be well-formatted, with internal links to navigate between wiki pages (e.g., \\\`[See the installation guide](./getting-started/Installation.md)\\\`). The folder and file structure must be clear and reflect that of a real documentation repository.`
        }
    }
];

const COMMON_CONFIG = { 
    architect: { enabled: true },
    translator: { enabled: true },
    commitMessageGenerator: { enabled: true },
};

/**
 * @const {Preset[]} presets
 * Un array di configurazioni preimpostate (preset) che gli utenti possono selezionare per configurare rapidamente le attività AI.
 */
export const presets: Preset[] = [
    { name: \'Personalized\', config: {} },
    { name: \'Speedy Draft\', config: { ...COMMON_CONFIG, projectOverview: { enabled: false }, fileFinder: { enabled: true, provider: \'groq\', model: \'llama3-8b-8192\' }, docExtractor: { enabled: true, provider: \'groq\', model: \'llama3-8b-8192\' }, readmeGenerator: { enabled: false }, wikiGenerator: { enabled: false }, codeRefactorer: { enabled: false }, codeReviewer: { enabled: false }, testGenerator: { enabled: false }, projectNameSuggester: { enabled: true, provider: \'groq\', model: \'llama3-8b-8192\' }, docstringGenerator: { enabled: false }}},
    { name: \'Code Generation\', config: { ...COMMON_CONFIG, projectOverview: { enabled: false }, fileFinder: { enabled: true }, docExtractor: { enabled: false }, readmeGenerator: { enabled: true }, wikiGenerator: { enabled: false }, codeRefactorer: { enabled: true }, codeReviewer: { enabled: false }, testGenerator: { enabled: true }, projectNameSuggester: { enabled: true }, docstringGenerator: { enabled: true }}},
    { name: \'Documentation Pro\', config: { ...COMMON_CONFIG, projectOverview: { enabled: false }, fileFinder: { enabled: true }, docExtractor: { enabled: true }, readmeGenerator: { enabled: true }, wikiGenerator: { enabled: true }, codeRefactorer: { enabled: false }, codeReviewer: { enabled: false }, testGenerator: { enabled: false }, projectNameSuggester: { enabled: true }, docstringGenerator: { enabled: true }}},
    { name: \'Test & Document\', config: { ...COMMON_CONFIG, projectOverview: { enabled: false }, fileFinder: { enabled: true }, docExtractor: { enabled: true }, readmeGenerator: { enabled: false }, wikiGenerator: { enabled: false }, codeRefactorer: { enabled: false }, codeReviewer: { enabled: false }, testGenerator: { enabled: true }, projectNameSuggester: { enabled: false }, docstringGenerator: { enabled: true }}},
    { name: \'Wiki Generator\', config: { ...COMMON_CONFIG, projectOverview: { enabled: false }, fileFinder: { enabled: true }, docExtractor: { enabled: true }, readmeGenerator: { enabled: false }, wikiGenerator: { enabled: true }, codeRefactorer: { enabled: false }, codeReviewer: { enabled: false }, testGenerator: { enabled: false }, projectNameSuggester: { enabled: true }, docstringGenerator: { enabled: false }}},
    { name: \'Code Polisher\', config: { ...COMMON_CONFIG, projectOverview: { enabled: false }, fileFinder: { enabled: false }, docExtractor: { enabled: false }, readmeGenerator: { enabled: false }, wikiGenerator: { enabled: false }, codeRefactorer: { enabled: true }, codeReviewer: { enabled: true }, testGenerator: { enabled: false }, projectNameSuggester: { enabled: false }, docstringGenerator: { enabled: true }}},
    { name: \'Full Power\', config: { ...COMMON_CONFIG, projectOverview: { enabled: true }, fileFinder: { enabled: true }, docExtractor: { enabled: true }, readmeGenerator: { enabled: true }, wikiGenerator: { enabled: true }, codeRefactorer: { enabled: true }, codeReviewer: { enabled: true }, testGenerator: { enabled: true }, projectNameSuggester: { enabled: true }, docstringGenerator: { enabled: true }}},
];


type TranslationObject = typeof translations.it;

/**
 * Factory function per creare l\'oggetto di configurazione dei prompt AI.
 * @param {TranslationObject} t - L\'oggetto delle traduzioni per la lingua corrente.
 * @param {AppSettings} [settings] - Le impostazioni correnti dell\'applicazione per impostare i provider e i modelli predefiniti.
 * @returns {AIPromptConfig} L\'oggetto di configurazione completo dei prompt.
 */
export const promptsConfig = (t: TranslationObject, settings?: AppSettings): AIPromptConfig => {
    const defaults = {
        provider: settings?.defaultProvider || \'google\',
        model: settings?.defaultModel || \'gemini-1.5-flash\'
    };
    
    return {
    projectOverview: { id: \'projectOverview\', title: t.aiPrompts.projectOverview_title, description: t.aiPrompts.projectOverview_description, enabled: false, provider: defaults.provider, model: defaults.model, content: `You are a master software architect. Your task is to expand the following idea into a complete, well-structured project. The output MUST be a single block of text representing all files. Each file must be clearly delineated by a markdown header like \\\`### path/to/file.js\\\` and its content enclosed in a language-specific code block like \\\`\\\`\\\`javascript ... \\\`\\\`\\\`. The initial input is just a starting point; you are expected to expand on it significantly to create a functional base project.\\n\\nInitial Project Idea:\\n---\\nPROJECT_CONTENT_PLACEHOLDER\\n---`},
    fileFinder: { id: \'fileFinder\', title: t.aiPrompts.fileFinder_title, description: t.aiPrompts.fileFinder_description, enabled: true, provider: defaults.provider, model: defaults.model, content: `You are an AI assistant completing a file parsing process. You will be given original text and a list of file paths already parsed by a script. Your task is to analyze the original text, find any complete file structures (with a clear path and content) NOT present in the parsed list, and return a single valid JSON object with one key, "additionalFiles", which is an array of file objects. If no new files are found, return an empty array. Do not add any text before or after the JSON object.`},
    docExtractor: { id: \'docExtractor\', title: t.aiPrompts.docExtractor_title, description: t.aiPrompts.docExtractor_description, enabled: true, provider: defaults.provider, model: defaults.model, content: `You are an AI assistant that extracts documentation from unstructured text. You will receive the original project text. Your task is to extract important descriptive text, goals, setup instructions, or other relevant information that is NOT part of a specific file\'s code block. Condense it all into a single, coherent string of notes. Return a single valid JSON object with one key, "documentationNotes". If you find no relevant information, return an empty string. Do not add any text before or after the JSON.`},
    readmeGenerator: { id: \'readmeGenerator\', title: t.aiPrompts.readmeGenerator_title, description: t.aiPrompts.readmeGenerator_description, enabled: true, provider: defaults.provider, model: defaults.model, content: `You are an expert open-source technical writer. Analyze the following project information to generate a comprehensive, well-structured README.md file using Markdown.\\n\\nThe README.md MUST include:\\n- **Project Title**: Use the provided Project Name as the main H1 title.\\n- **Description**: A short paragraph explaining what the project does.\\n- **Key Features**: A bulleted list of important features.\\n- **Tech Stack**: Key technologies used (e.g., React, Gemini API).\\n- **Setup & Usage**: Step-by-step instructions to set up and run the project.\\n- **Deployment**: Guidance for deploying to services like Netlify, Vercel, or GitHub Pages, including how to handle environment variables like \\\`API_KEY\\\`.\\n- **Contributing**: A welcoming section for potential contributors.\\n- **License**: State that the project is under the MIT license.\\n\\n**CRITICAL INSTRUCTIONS**:\\n1. Synthesize all information, especially from "Additional Documentation Notes".\\n2. EXCLUDE full code blocks. Inline commands (e.g., \\\`npm install\\\`) are allowed.\\n3. The entire output MUST be a single, valid Markdown block.`},
    wikiGenerator: { id: \'wikiGenerator\', title: t.aiPrompts.wikiGenerator_title, description: t.aiPrompts.wikiGenerator_description, enabled: false, provider: defaults.provider, model: defaults.model, content: `You are an expert technical writer tasked with creating a documentation repository structured like a wiki. The output must be a single block of text representing all files for the wiki. Each file must be clearly delineated by a markdown header like \\\`### path/to/file.md\\\` and its content enclosed in a markdown code block like \\\`\\\`\\\`markdown ... \\\`\\\`\\\`.\\n\\nBased on the provided project content, generate the following file structure:\\n\\n- \\\`Home.md\\\`: A welcome page that introduces the project, its vision, and how to navigate the wiki.\\n- \\\`getting-started/Installation.md\\\`: Detailed installation instructions.\\n- \\\`getting-started/Quick-Start.md\\\`: A quick tutorial for new users.\\n- \\\`deep-dive/Architecture.md\\\`: An overview of the software\'s architecture.\\n- \\\`how-to/Contribute.md\\\`: Guidelines for contributing to the project.\\n\\nEnsure you include internal links between the markdown files, for example: \\\`[See the installation guide](./getting-started/Installation.md)\\\`.\\n\\nThe content of these files should be synthesized from the provided project information.\\n\\nProject Information:\\n---\\nPROJECT_CONTENT_PLACEHOLDER\\n---`},
    codeRefactorer: { id: \'codeRefactorer\', title: t.aiPrompts.codeRefactorer_title, description: t.aiPrompts.codeRefactorer_description, enabled: true, provider: defaults.provider, model: defaults.model, content: `You are an expert programmer and AI assistant specializing in code quality. A user has provided code to be refactored. Your tasks are:\\n1.  **Analyze the Code**: Understand its purpose, logic, and structure.\\n2.  **Refactor for Improvement**: Apply best practices to improve readability, performance, and clarity. Add concise, helpful comments where the logic is complex.\\n3.  **Maintain Functionality**: The refactored code must have the exact same functionality and external behavior as the original.\\n4.  **Return Only Code**: Your output MUST be only the complete, refactored code inside a single code block, with no explanations or extra text before or after.\\n\\n**Code to Refactor:**\\n---\\nCODE_PLACEHOLDER`},
    codeReviewer: { id: \'codeReviewer\', title: t.aiPrompts.codeReviewer_title, description: t.aiPrompts.codeReviewer_description, enabled: true, provider: defaults.provider, model: defaults.model, content: `You are an expert senior software engineer performing a code review. Analyze the following code for potential bugs, performance issues, unclear logic, and deviations from best practices. Provide your feedback as a structured Markdown list. For each point, state the issue, explain why it\'s a problem, and suggest a clear improvement. Do not rewrite the entire file. Your output MUST be only the Markdown feedback.\\n\\n**Code to Review:**\\n---\\nCODE_PLACEHOLDER`},
    testGenerator: { id: \'testGenerator\', title: t.aiPrompts.testGenerator_title, description: t.aiPrompts.testGenerator_description, enabled: true, provider: defaults.provider, model: defaults.model, content: `You are an AI assistant specializing in software testing. Based on the provided file content, generate a corresponding test file.\\n\\n**Source File Path:** \\\`{filePath}\\\`\\n**Source File Content:**\\n\\`\\\`\\\`\\n{fileContent}\\n\\`\\\`\\\`\\n\\n**Instructions:**\\n1.  **Determine Test Framework**: Infer the appropriate testing framework (e.g., Jest for React, PyTest for Python, etc.) based on the file content and language.\\n2.  **Create Test Cases**: Write meaningful test cases that cover the core functionality, edge cases, and potential failure points of the source code.\\n3.  **Suggest a File Path**: Propose a conventional file path for the test file (e.g., \\\`src/components/MyComponent.test.js\\\`).\\n4.  **Format as JSON**: Return a single, valid JSON object with two keys: \\\`path\\\` (the string path for the new test file) and \\\`content\\\` (the complete code for the test file as a string).\\n\\nYour entire output must be only the JSON object.`},
    projectNameSuggester: { id: \'projectNameSuggester\', title: t.aiPrompts.projectNameSuggester_title, description: t.aiPrompts.projectNameSuggester_description, enabled: true, provider: defaults.provider, model: defaults.model, content: `You are a creative branding expert. Analyze the following project description and content to suggest a short, catchy, and memorable project name. The name should be suitable for a GitHub repository (e.g., use PascalCase or kebab-case). Return ONLY the name and nothing else.\\n\\n**Project Content:**\\n---\\nPROJECT_CONTENT_PLACEHOLDER\\n---`},
    docstringGenerator: { id: \'docstringGenerator\', title: t.aiPrompts.docstringGenerator_title, description: t.aiPrompts.docstringGenerator_description, enabled: true, provider: defaults.provider, model: defaults.model, content: `You are an AI assistant that writes clean, informative docstrings for code. Analyze the provided code and add docstrings to all functions, classes, and methods according to language conventions (e.g., JSDoc, Python Docstrings). Return the complete code with the added docstrings. Your output MUST be only the complete, updated code inside a single code block, with no extra explanation.\\n\\n**Original Code:**\\n---\\nCODE_PLACEHOLDER\\n---`},
    architect: { id: \'architect\', title: t.aiPrompts.architect_title, description: t.aiPrompts.architect_description, enabled: true, provider: settings?.architectProvider || defaults.provider, model: settings?.architectModel || defaults.model, content: `You are an expert AI Software Architect. Your task is to help a user define their project requirements through conversation.\\n1. Start by asking clarifying questions about their initial idea.\\n2. Guide them through key decisions: tech stack (frontend, backend), database, features, etc.\\n3. Be concise and helpful. Ask one or two questions at a time.\\n4. Once you have gathered enough information to build a solid project structure, end your response with the exact sentence: "I have enough information to generate the project. Shall I proceed?". Do not add any text after this sentence.`},
    translator: { id: \'translator\', title: t.aiPrompts.translator_title, description: t.aiPrompts.translator_description, enabled: true, provider: defaults.provider, model: defaults.model, content: `Translate the following text to {targetLanguage}. Return only the translated text, without any extra explanations or formatting.\\n\\nText to translate:\\n---\\n{text}\\n---`},
    commitMessageGenerator: { id: \'commitMessageGenerator\', title: t.aiPrompts.commitMessageGenerator_title, description: t.aiPrompts.commitMessageGenerator_description, enabled: true, provider: defaults.provider, model: defaults.model, content: `You are an expert at writing conventional Git commit messages. Based on the project name and the list of file paths that have been created or modified, generate a concise and descriptive commit message. Return ONLY the message text itself, without any prefixes like "feat:" or quotes.\\n\\nProject Name: {projectName}\\nFile Paths:\\n- {filePaths}\\n\\nCommit Message:`},
}};
